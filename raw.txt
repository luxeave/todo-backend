// --------- main.rs ---------
mod api;
mod task_controller;
mod data_validator;
mod database;
mod error_handler;

use actix_web::{App, HttpServer};
use actix_cors::Cors;

#[actix_web::main]
async fn main() -> std::io::Result<()> {
    // Initialize the database
    database::initialize_database().expect("Failed to initialize database");

    HttpServer::new(|| {
        let cors = Cors::default()
            .allow_any_origin()
            .allow_any_method()
            .allow_any_header()
            .max_age(3600);

        App::new()
            .wrap(cors)
            .service(api::config())
    })
    .bind("127.0.0.1:8080")?
    .run()
    .await
}
// --------- data_validator.rs ---------
use crate::task_controller::Task;

pub fn validate_task(task: &Task) -> Result<(), String> {
    println!("Validating task: {:?}", task);
    if task.title.is_empty() {
        return Err("Title is required".to_string());
    }
    if task.title.len() > 100 {
        return Err("Title must be 100 characters or less".to_string());
    }
    if let Some(context) = &task.context {
        if context.len() > 500 {
            return Err("Context must be 500 characters or less".to_string());
        }
    }
    if let Some(notes) = &task.notes {
        if notes.len() > 1000 {
            return Err("Notes must be 1000 characters or less".to_string());
        }
    }
    if task.tags.len() > 10 {
        return Err("Maximum of 10 tags allowed".to_string());
    }
    for tag in &task.tags {
        if tag.len() > 30 {
            return Err("Each tag must be 30 characters or less".to_string());
        }
    }
    
    // Validate dates
    if let (Some(start), Some(end)) = (&task.start_date, &task.end_date) {
        if end < start {
            return Err("End date must be after or equal to the start date".to_string());
        }
    }
    if let (Some(start), Some(expected)) = (&task.start_date, &task.expected_end_date) {
        if expected < start {
            return Err("Expected end date must be after or equal to the start date".to_string());
        }
    }

    Ok(())
}
// --------- error_handler.rs ---------
use actix_web::HttpResponse;

pub fn handle_error<T: std::fmt::Display>(error: T) -> HttpResponse {
    HttpResponse::InternalServerError().json(format!("Error: {}", error))
}
// --------- task_controller.rs ---------
use actix_web::{web, HttpResponse, Responder};
use serde::{Deserialize, Serialize};
use crate::data_validator;
use crate::database;
use crate::error_handler;

#[derive(Debug, Serialize, Deserialize)]
pub struct Task {
    pub id: Option<i64>,
    pub title: String,
    pub context: Option<String>,
    pub start_date: Option<String>,
    pub end_date: Option<String>,
    pub expected_end_date: Option<String>,
    pub tags: Vec<String>,
    pub notes: Option<String>,
    pub status: String,
}

pub async fn get_tasks() -> impl Responder {
    let db = database::get_connection();
    match database::get_tasks(&db) {
        Ok(tasks) => HttpResponse::Ok().json(tasks),
        Err(e) => error_handler::handle_error(e),
    }
}

pub async fn create_task(task: web::Json<Task>) -> impl Responder {
    println!("Received task: {:?}", task);
    if let Err(e) = data_validator::validate_task(&task) {
        println!("Validation error: {}", e);
        return error_handler::handle_error(e);
    }

    let db = database::get_connection();
    match database::create_task(&db, &task) {
        Ok(id) => HttpResponse::Created().json(id),
        Err(e) => {
            println!("Database error: {}", e);
            error_handler::handle_error(e)
        }
    }
}

pub async fn update_task(id: web::Path<i64>, task: web::Json<Task>) -> impl Responder {
    if let Err(e) = data_validator::validate_task(&task) {
        return error_handler::handle_error(e);
    }

    let db = database::get_connection();
    match database::update_task(&db, *id, &task) {
        Ok(_) => HttpResponse::Ok().finish(),
        Err(e) => error_handler::handle_error(e),
    }
}
// --------- api.rs ---------
use actix_web::{web, Scope};
use crate::task_controller;

pub fn config() -> Scope {
    web::scope("/api")
        .service(web::resource("/tasks").route(web::get().to(task_controller::get_tasks)))
        .service(web::resource("/task").route(web::post().to(task_controller::create_task)))
        .service(web::resource("/task/{id}").route(web::put().to(task_controller::update_task)))
}
// --------- database.rs ---------
use rusqlite::{params, Connection, Result};
use crate::task_controller::Task;

pub fn get_connection() -> Connection {
    let db_path = "tasks.db";
    Connection::open(&db_path).unwrap_or_else(|_| {
        panic!("Failed to open or create database at {}", db_path)
    })
}
pub fn get_tasks(conn: &Connection) -> Result<Vec<Task>> {
    let mut stmt = conn.prepare("SELECT * FROM tasks WHERE status = 'active'")?;
    let task_iter = stmt.query_map([], |row| {
        Ok(Task {
            id: row.get(0)?,
            title: row.get(1)?,
            context: row.get(2)?,
            start_date: row.get(3)?,
            end_date: row.get(4)?,
            expected_end_date: row.get(5)?,
            tags: row.get::<_, String>(6)?.split(',').map(String::from).collect(),
            notes: row.get(7)?,
            status: row.get(8)?,
        })
    })?;

    let mut tasks = Vec::new();
    for task in task_iter {
        tasks.push(task?);
    }
    Ok(tasks)
}

pub fn create_task(conn: &Connection, task: &Task) -> Result<i64> {
    conn.execute(
        "INSERT INTO tasks (title, context, start_date, end_date, expected_end_date, tags, notes, status) 
         VALUES (?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8)",
        params![
            task.title,
            task.context,
            task.start_date,
            task.end_date,
            task.expected_end_date,
            task.tags.join(","),
            task.notes,
            task.status,
        ],
    )?;
    Ok(conn.last_insert_rowid())
}

pub fn update_task(conn: &Connection, id: i64, task: &Task) -> Result<()> {
    conn.execute(
        "UPDATE tasks SET title = ?1, context = ?2, start_date = ?3, end_date = ?4, 
         expected_end_date = ?5, tags = ?6, notes = ?7, status = ?8 WHERE id = ?9",
        params![
            task.title,
            task.context,
            task.start_date,
            task.end_date,
            task.expected_end_date,
            task.tags.join(","),
            task.notes,
            task.status,
            id,
        ],
    )?;
    Ok(())
}

pub fn initialize_database() -> Result<(), rusqlite::Error> {
    let conn = get_connection();
    conn.execute(
        "CREATE TABLE IF NOT EXISTS tasks (
            id INTEGER PRIMARY KEY,
            title TEXT NOT NULL,
            context TEXT,
            start_date TEXT,
            end_date TEXT,
            expected_end_date TEXT,
            tags TEXT,
            notes TEXT,
            status TEXT NOT NULL,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )",
        [],
    )?;
    Ok(())
}
